name: Release Swiper Plugin

on:
  schedule:
    # Проверяем обновления Swiper каждый день в полночь
    - cron: '0 0 * * *'
  workflow_dispatch: # Позволяет запустить вручную

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Используем токен для коммитов

      - name: Get latest Swiper release
        id: get_swiper_release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/nolimits4web/swiper/releases/latest | jq -r .tag_name | sed 's/^v//')
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "Found latest Swiper release: $LATEST_RELEASE"

      - name: Download Swiper files
        run: |
          # Папки media/css и media/js уже существуют, как сказано в задании
          RELEASE_NUM=${{ env.LATEST_RELEASE }}
          CSS_URL="https://cdn.jsdelivr.net/npm/swiper@$RELEASE_NUM/swiper-bundle.min.css"
          JS_URL="https://cdn.jsdelivr.net/npm/swiper@$RELEASE_NUM/swiper-bundle.min.js"
          MAP_URL="https://cdn.jsdelivr.net/npm/swiper@$RELEASE_NUM/swiper-bundle.min.js.map"

          curl -L $CSS_URL -o media/css/swiper-bundle.min.css
          curl -L $JS_URL -o media/js/swiper-bundle.min.js
          curl -L $MAP_URL -o media/js/swiper-bundle.min.js.map

      - name: Prepare Build Variables
        run: |
          BUILD_DATE=$(date +%d.%m.%Y)
          BUILD_YEAR=$(date +%Y)
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "BUILD_YEAR=$BUILD_YEAR" >> $GITHUB_ENV
          echo "BUILD_VERSION=${{ env.LATEST_RELEASE }}" >> $GITHUB_ENV

      - name: Update version and date in XML file
        run: |
          # Обновляем версию и дату в wtjswiper.xml
          sed -i "s/<version>[^<]*<\/version>/<version>${{ env.LATEST_RELEASE }}<\/version>/" wtjswiper.xml
          sed -i "s/<creationDate>[^<]*<\/creationDate>/<creationDate>${{ env.BUILD_DATE }}<\/creationDate>/" wtjswiper.xml

      - name: Update version in joomla.asset.json
        run: |
          # Обновляем все поля "version" в joomla.asset.json
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ env.LATEST_RELEASE }}\"/g" media/joomla.asset.json

      - name: Update @version in PHP files
        run: |
          # Находим все PHP файлы и заменяем @version
          find . -name "*.php" -type f -exec sed -i "s/@version .*/@version ${{ env.LATEST_RELEASE }}/g" {} \;

      - name: Update placeholders in all text files
        run: |
          # Заменяем плейсхолдеры во всех текстовых файлах
          # Ищем файлы с расширениями, обычно являющиеся текстовыми, или без расширения
          # Можно расширить список, если нужно учитывать другие
          find . -type f \( -name "*.txt" -o -name "*.md" -o -name "*.xml" -o -name "*.json" -o -name "*.js" -o -name "*.css" -o -name "*.php" -o -name "*.html" -o -name "*.yml" -o -name "*.yaml" -o -name "*.ini" -o -name "*.sql" -o -name "*.sh" -o -name "*.py" -o -name "*.rb" -o -name "*.pl" -o -name "*.go" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.vue" -o -name "*.twig" -o -name "*.blade.php" -o -name "*.scss" -o -name "*.less" -o -name "*.cfg" -o -name "*.conf" -o -name "*.properties" -o -name "*.log" -o -name "*.csv" -o -name "*.tsv" -o -name "*.sql" -o -name "*.txt~" -o -name "*.bak" -o -name "*.*" ! -name "*.exe" ! -name "*.bin" ! -name "*.so" ! -name "*.dll" ! -name "*.jar" ! -name "*.war" ! -name "*.zip" ! -name "*.tar" ! -name "*.gz" ! -name "*.bz2" ! -name "*.xz" ! -name "*.7z" ! -name "*.rar" ! -name "*.dmg" ! -name "*.pkg" ! -name "*.deb" ! -name "*.rpm" \) -exec grep -Iq . {} \; -exec sed -i "s/BUILD_DATE/${{ env.BUILD_DATE }}/g" {} \;
          find . -type f \( -name "*.txt" -o -name "*.md" -o -name "*.xml" -o -name "*.json" -o -name "*.js" -o -name "*.css" -o -name "*.php" -o -name "*.html" -o -name "*.yml" -o -name "*.yaml" -o -name "*.ini" -o -name "*.sql" -o -name "*.sh" -o -name "*.py" -o -name "*.rb" -o -name "*.pl" -o -name "*.go" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.vue" -o -name "*.twig" -o -name "*.blade.php" -o -name "*.scss" -o -name "*.less" -o -name "*.cfg" -o -name "*.conf" -o -name "*.properties" -o -name "*.log" -o -name "*.csv" -o -name "*.tsv" -o -name "*.sql" -o -name "*.txt~" -o -name "*.bak" -o -name "*.*" ! -name "*.exe" ! -name "*.bin" ! -name "*.so" ! -name "*.dll" ! -name "*.jar" ! -name "*.war" ! -name "*.zip" ! -name "*.tar" ! -name "*.gz" ! -name "*.bz2" ! -name "*.xz" ! -name "*.7z" ! -name "*.rar" ! -name "*.dmg" ! -name "*.pkg" ! -name "*.deb" ! -name "*.rpm" \) -exec grep -Iq . {} \; -exec sed -i "s/BUILD_YEAR/${{ env.BUILD_YEAR }}/g" {} \;
          find . -type f \( -name "*.txt" -o -name "*.md" -o -name "*.xml" -o -name "*.json" -o -name "*.js" -o -name "*.css" -o -name "*.php" -o -name "*.html" -o -name "*.yml" -o -name "*.yaml" -o -name "*.ini" -o -name "*.sql" -o -name "*.sh" -o -name "*.py" -o -name "*.rb" -o -name "*.pl" -o -name "*.go" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.vue" -o -name "*.twig" -o -name "*.blade.php" -o -name "*.scss" -o -name "*.less" -o -name "*.cfg" -o -name "*.conf" -o -name "*.properties" -o -name "*.log" -o -name "*.csv" -o -name "*.tsv" -o -name "*.sql" -o -name "*.txt~" -o -name "*.bak" -o -name "*.*" ! -name "*.exe" ! -name "*.bin" ! -name "*.so" ! -name "*.dll" ! -name "*.jar" ! -name "*.war" ! -name "*.zip" ! -name "*.tar" ! -name "*.gz" ! -name "*.bz2" ! -name "*.xz" ! -name "*.7z" ! -name "*.rar" ! -name "*.dmg" ! -name "*.pkg" ! -name "*.deb" ! -name "*.rpm" \) -exec grep -Iq . {} \; -exec sed -i "s/BUILD_VERSION/${{ env.LATEST_RELEASE }}/g" {} \;

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "Update Swiper to v${{ env.LATEST_RELEASE }}" || exit 0 # Не фейлится, если нет изменений
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Этот шаг создает релиз в *вашем* репозитории плагина Joomla
      # Он выполняется *после* всех изменений и коммита
      - name: Create Release in Plugin Repository
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.LATEST_RELEASE }} # Используем версию Swiper как тег для релиза
          release_name: "Plugin Release v${{ env.LATEST_RELEASE }}" # Название релиза
          body: | # Тело релиза (опционально)
            This release updates the Swiper library to version ${{ env.LATEST_RELEASE }}.
            - Updated Swiper CSS, JS, and map files.
            - Updated version and creation date in plugin manifest.
            - Updated version placeholders across all relevant files.
          draft: false # Релиз не является черновиком
          prerelease: false # Релиз не является предварительным